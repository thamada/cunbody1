//Time-stamp: <2007-05-25 04:41:05 hamada>
//Copyright(c) 2000-2007 by Tsuyoshi Hamada. All rights reserved.

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#define NMAX (1<<17) // 131072
#include <time.h>
#include <unistd.h> // sleep()

/* ----------------------------------------------------
 * Force Error Check (with Input/Result File)
 * ---------------------------------------------------- */
#define EPS 0.1
static double r[NMAX][3];
static double m[NMAX];
static double eps2 = (EPS*EPS);
static double acc_d[NMAX][3];
static double acc_h[NMAX][3];
static double pot_h[NMAX];
static double v[NMAX][3];

#include "init_particles.c"
//#include "force_host.h"

void force(double xj[][3], double mj[], double xi[][3], double eps2, double a[][3], int ni, int nj);

int main( int argc, char** argv) 
{
  int i, n;

  if(argc == 3){
    int nn;
    char ifile[256], rfile[256];
    strcpy(ifile,argv[1]);
    strcpy(rfile,argv[2]);
    init_particles(ifile, &n,  m,r,v);
    read_result   (rfile, &nn, acc_h, pot_h);
    if(n != nn){
      fprintf(stderr, "Abort at %s|%d\n"__FILE__, __LINE__);
      exit(-1);
    }
  }else{
    fprintf(stderr, "cmd <init_filename> <result_file\n");
    fprintf(stderr, "i.e. : run.gpu ../Dfile/init.plum.131072 ../Dfile/result.131072\n");
    fprintf(stderr, "exit program\n");
    exit(-1);
  }

  force(r, m, r, eps2, acc_d, n, n);

  /*
  {//--------------- generate result file
    double jk[65536][3];
    force_pot_jerk_host(r, v, m, pot_h, acc_h, jk, n);
    printf("%d\n", n);
    for(i=0;i<n;i++){
      //      printf("%1.16e\t%1.16e\t%1.16e\t%1.16e\t%1.16e\t%1.16e\t%1.16e\t");
      printf("%1.16e\t%1.16e\t%1.16e\t%1.16e\t%1.16e\t%1.16e\t%1.16e\t\n",
	     acc_h[i][0], acc_h[i][1], acc_h[i][2], pot_h[i],
	     jk[i][0], jk[i][1], jk[i][2]);
    }
    exit(0);
  }
  */

  for(i=0;i<n;i++){
    int d;
    static double err_max = 0.0;
    double err=0.0;
    for(d=0;d<3;d++){
      double diff = fabs(acc_d[i][d] - acc_h[i][d]);
      err += (diff*diff);
    }
    err = sqrt(err);
    err = err/sqrt(acc_h[i][0]*acc_h[i][0]+acc_h[i][1]*acc_h[i][1]+acc_h[i][2]*acc_h[i][2]);

    //    printf("HOST %.7e\t%.7e\t%.7e\n", acc_h[i][0], acc_h[i][1], acc_h[i][2]);
    //    printf("GPU  %.7e\t%.7e\t%.7e\n", acc_d[i][0], acc_d[i][1], acc_d[i][2]);

    if (err > err_max){
      err_max = err;
      printf("%.7e\n", err);
    }

    /*
    if (err > 1.0e-5){
      printf("HOST[%d] %.7e\t%.7e\t%.7e\n", i, acc_h[i][0], acc_h[i][1], acc_h[i][2]);
      printf("GPU [%d] %.7e\t%.7e\t%.7e\n", i, acc_d[i][0], acc_d[i][1], acc_d[i][2]);
    }
    */
  }
  return (0);
}

